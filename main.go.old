package main

import (
	"github.com/tarm/goserial"
	"log"
	"fmt"
	"io"
	"net/http"
	"code.google.com/p/go.net/websocket"
)

// Echo the data received on the WebSocket.
func EchoServer(ws *websocket.Conn) {
    io.Copy(ws, ws)
    io.
}

// This example demonstrates a trivial echo server.
func ExampleHandler() {
    http.Handle("/echo", websocket.Handler(EchoServer))
    err := http.ListenAndServe(":12345", nil)
    if err != nil {
        panic("ListenAndServe: " + err.Error())
    }
}

func wsHandler(ws *websocket.Conn) {
	var in []byte
	err := websocket.Message.Receive(ws, &in);
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Received: %s\n", string(in))
	websocket.Message.Send(ws, in) 
}

func rootHandler(w http.ResponseWriter, r *http.Request) {
	//url := r.URL.Path[1:]
	//fmt.Fprintf(w, "Hi there, I love %s!", url)
	fmt.Fprintf(w, "<script>ws = new WebSocket(\"ws://localhost:8080/echo\");\n" +
		"ws.onmessage = function(e) {\n" +
		"console.log(\"websock: \" + e.data);\n" +
		"};\n" +
		"ws.send(\"hello\");\n" +
		"</script>You should now be connected to our websocket.")
}

func main() {

	fmt.Println("Starting web server on localhost:8080 and websocket server: ")
	
	//ExampleHandler()
	http.Handle("/echo", websocket.Handler(wsHandler))
	http.HandleFunc("/", rootHandler)
    http.ListenAndServe(":8080", nil)
	
	c := &serial.Config{Name: "COM22", Baud: 115200}
	s, err := serial.OpenPort(c)
	if err != nil {
		log.Fatal(err)
	}

	n, err := s.Write([]byte("?\n"))
	if err != nil {
		log.Fatal(err)
	}

	//buf := make([]byte, 128)
	buf := make([]byte, 2048)
	n, err = s.Read(buf)
	for (n > 0) {
		if err != nil {
			log.Fatal(err)
			n = 0; // to break for loop
		}
		//log.Print
		//log.Printf("%q", buf[:n])
		fmt.Printf("%s", buf[:n])
		n = 0
		n, err = s.Read(buf)
	}
}